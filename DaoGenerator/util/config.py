#!/usr/bin/env python
import json
import os
import jsonutil
from constant import JsonConstants

class ConfigurationProperties(object):
    '''
    This class contains a series of property-like methods that act as 'getters' for values contained in config/config.json.
    '''
    
    def __init__(self , configurationFilePath='' , logger=None):
        self.__logger = logger
        self.__configFileObj = self.__createConfigurationObject(configurationFilePath)
        
        
    def __jsonModelConfigurationFiles(self , jsonUtil=None ,  jsonConfig=None):
        '''
        This method is charged with assembling all of the values contained the JSON model files
        
        @param jsonConfig: The jsonutil.JsonUtil object passed through to this method
        @type jsonConfig: jsonutil.JsonUtil
        @return: dict
        '''
        configObj = {}
        if jsonConfig is not None and len(jsonConfig) > 0:
            configObj['database-schema-name'] = jsonConfig['databaseSchemaName']
            configObj['database-name'] = jsonConfig['databaseName']
            configObj['global-class-namespace'] = jsonConfig['globalClassNameSpace']
            configObj['directories'] = jsonConfig['directories']
            configDir = configObj['directories']['config']
            configObj['profile'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath( configDir + jsonConfig['jsonModelFiles']['profile'])
            configObj['database'] = {}
            configObj['database']['views'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath( configDir +  jsonConfig['jsonModelFiles']['database']['view'])
            configObj['database']['schema'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath(configDir +  jsonConfig['jsonModelFiles']['database']['schema'])
            configObj['database']['stored-procedures'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath( configDir +  jsonConfig['jsonModelFiles']['database']['storedProcedures'])
            configObj['persistence'] = {}
            configObj['persistence']['dao'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath( configDir +  jsonConfig['jsonModelFiles']['persistence']['dao'])
            configObj['persistence']['dao-impl'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath( configDir +  jsonConfig['jsonModelFiles']['persistence']['daoImpl'])
            configObj['persistence']['dao-factory'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath( configDir +  jsonConfig['jsonModelFiles']['persistence']['daoFactory'])
            configObj['value-object'] = jsonUtil.retrieveJsonObjectFromJsonConfigPath(configDir +  jsonConfig['jsonModelFiles']['valueObject'])
        return configObj
    
    def __templateFiles(self , jsonConfig=None):
        '''
        This method is charged with assembling all of the information related to the Jinja templates used for script/code generation
        
        @param jsonConfig: The jsonutil.JsonUtil object passed through to this method
        @type jsonConfig: jsonutil.JsonUtil
        @return: dict
        '''
        configObj = {}
        if jsonConfig is not None and len(jsonConfig) > 0:
            configObj['template-directory'] = jsonConfig['templates']['templateDirectory']
            configObj['database'] = {}            
            configObj['database']['create-views'] = jsonConfig['templates']['database']['createViews']
            configObj['database']['create-tables'] = jsonConfig['templates']['database']['createTables']
            configObj['database']['alter-tables'] = jsonConfig['templates']['database']['alterTables']
            configObj['database']['stored-procedures'] = jsonConfig['templates']['database']['storedProcedures']
            configObj['database']['drop-tables-and-views'] = jsonConfig['templates']['database']['dropTablesAndViews']
            configObj['database']['delete-all-data-from-tables'] = jsonConfig['templates']['database']['deleteAllDataFromTables']
            configObj['persistence'] = {}
            configObj['persistence']['dao'] = jsonConfig['templates']['persistence']['dao']
            configObj['persistence']['daoImpl'] = jsonConfig['templates']['persistence']['daoImpl']
            configObj['value-object'] = jsonConfig['templates']['valueObject']
        return configObj
    
    def __outputFiles(self , jsonConfig=None):
        '''
        This method is charged with assembling all of the information related to the names of the files generated by this project
        
        @param jsonConfig: The jsonutil.JsonUtil object passed through to this method
        @type jsonConfig: jsonutil.JsonUtil
        @return: dict
        '''
        configObj = {}
        if jsonConfig is not None and len(jsonConfig) > 0:
            configObj['sql'] = {}
            configObj['sql']['create-tables'] = jsonConfig['outputFiles']['sql']['createTablesScript']
            configObj['sql']['create-views'] = jsonConfig['outputFiles']['sql']['createViewsScript']
            configObj['sql']['alter-tables'] = jsonConfig['outputFiles']['sql']['alterTablesScript']
            configObj['sql']['delete-all-data-from-tables'] = jsonConfig['outputFiles']['sql']['deleteValuesFromAllTablesScript']
            configObj['sql']['create-stored-procedures'] = jsonConfig['outputFiles']['sql']['createStoredProceduresScript']
            configObj['sql']['drop-tables-and-views'] = jsonConfig['outputFiles']['sql']['dropTablesAndViewsScript']
            configObj['java'] = {}
            configObj['java']['dao'] = jsonConfig['outputFiles']['java']['daoTemplateJavaFileName']
            configObj['java']['daoImpl'] = jsonConfig['outputFiles']['java']['daoImplTemplateJavaFileName']
            configObj['java']['value-object'] = jsonConfig['outputFiles']['java']['valueObjectTemplateFileName']
        return configObj
    
    def __createConfigurationObject(self , configFilePath=''):
        '''
        This method is charged with assembling all of the values from the preceding utility methods for easy parsing and data loading.
        
        @return: dict
        '''
        configObj = {}
        jsonConfig = {}
        jsonUtil = None
        jsonConfig = None
        try:
            confAbsPath = os.path.abspath(configFilePath)
            if confAbsPath is not None:
                jsonUtil = jsonutil.JsonUtil(confAbsPath , logger=self.__logger)
                jsonConfig = jsonUtil.retrieveJsonObjectFromJsonConfig()
                if jsonUtil is not None:
                    configObj['main-config'] = self.__jsonModelConfigurationFiles(jsonUtil , jsonConfig)
                    configObj['templates'] = self.__templateFiles(jsonConfig)
                    configObj['output-files'] = self.__outputFiles(jsonConfig)                        
        except IOError , ioerror:
            self.__logger.error("ConfigurationUtil.createConfigurationObject: IOException occurred - {0}".format(str(ioerror)))
        except Exception , error:
            self.__logger.error("ConfigurationUtil.createConfigurationObject: Exception occurred - {0}".format(str(error)))
        return configObj
    
    def databaseName(self):
        return self.__configFileObj['main-config']['database-name']   
    
    def databaseSchemaName(self):
        return self.__configFileObj['main-config']['database-schema-name']
    
    def globalClassNameSpace(self):
        return self.__configFileObj['main-config']['global-class-namespace']
    
    def sqlTables(self):
        return self.__configFileObj['main-config']['database']['schema']['table']
    
    def sqlViews(self):
        return self.__configFileObj['main-config']['database']['views']['view']
    
    def sqlStoredProcedures(self):
        return self.__configFileObj['main-config']['database']['stored-procedures']['stored-procedure']
    
    def profiles(self):
        return self.__configFileObj['main-config']['profile']
    
    def valueObjects(self):
        return self.__configFileObj['main-config']['value-object']['value-object']
    
    def daos(self):
        return self.__configFileObj['main-config']['persistence']['dao']['dao']
    
    def daoImpls(self):
        return self.__configFileObj['main-config']['persistence']['dao-impl']['dao-impl']
    
    def daoFactories(self):
        return self.__configFileObj['main-config']['persistence']['dao-factory']
        
    def mainDeploymentDirectory(self):
        return self.__configFileObj['main-config']['directories']['main-deployment-dir']
    
    def deploymentDirectory(self , directory_name):
        outputDirectory = ''
        try:
            if not self.__configFileObj is None:
                if directory_name ==  JsonConstants.DEPLOYMODEL:
                    main_directory_name = self.mainDeploymentDirectory()
                    subDirectory = self.__configFileObj['main-config']['directories']['deploy']['model']
                    outputDirectory = main_directory_name + subDirectory
                elif directory_name == JsonConstants.DEPLOYPROFILE:
                    main_directory_name = self.mainDeploymentDirectory()
                    subDirectory = self.__configFileObj['main-config']['directories']['deploy']['profile']
                    outputDirectory = main_directory_name + subDirectory
                elif directory_name == JsonConstants.DEPLOYDAO:
                    main_directory_name = self.mainDeploymentDirectory()
                    daoDirectory = self.__configFileObj['main-config']['directories']['deploy']['persistence']['dao']
                    outputDirectory = main_directory_name +  daoDirectory
                elif directory_name == JsonConstants.DEPLOYDAOIMPL:
                    main_directory_name = self.mainDeploymentDirectory()
                    daoImplDirectory = self.__configFileObj['main-config']['directories']['deploy']['persistence']['daoImpl']
                    outputDirectory = main_directory_name + daoImplDirectory
                elif directory_name == JsonConstants.DEPLOYFACTORY:
                    main_directory_name = self.mainDeploymentDirectory()
                    factoryDirectory = self.mainDeploymentDirectory()
                    outputDirectory = main_directory_name + factoryDirectory 
                elif directory_name == JsonConstants.DEPLOYSQL:
                    main_directory_name = self.mainDeploymentDirectory()
                    subdirectory = self.__configFileObj['main-config']['directories']['deploy']['sql']
                    outputDirectory = main_directory_name + subdirectory
                elif directory_name == JsonConstants.JSONCONFIG:
                    main_directory_name = selfmainDeploymentDirectory()
                    outputDirectory = main_directory_name
        except IOError, ioerr:
            self.__logger.error( '***** Configuration.deploymentDirectory: IOError occurred - {0}'.format(str(ioerr)))
        return outputDirectory
    
    def templateDirectoryName(self):
        return self.__configFileObj['templates']['template-directory']
    
    def createTablesTemplateFileName(self):
        return self.__configFileObj['templates']['database']['create-tables']
    
    def createViewsTemplateFileName(self):
        return self.__configFileObj['templates']['database']['create-views']
    
    def alterTablesTemplateFileName(self):
        return self.__configFileObj['templates']['database']['alter-tables']
    
    def createStoredProceduresTemplateFileName(self):
        return self.__configFileObj['templates']['database']['stored-procedures']
    
    def dropTablesAndViewsTemplateFileName(self):
        return self.__configFileObj['templates']['database']['drop-tables-and-views']
    
    def deleteAllDataFromTablesTemplateFileName(self):
        return self.__configFileObj['templates']['database']['delete-all-data-from-tables']
    
    def daoTemplateFileName(self):
        return self.__configFileObj['templates']['persistence']['dao']
    
    def daoImplTemplateFileName(self):
        return self.__configFileObj['templates']['persistence']['daoImpl']
    
    def valueObjectTemplateFileName(self):
        return self.__configFileObj['templates']['value-object']
    
    def createTablesScriptFileName(self):
        return self.__configFileObj['output-files']['sql']['create-tables']
    
    def createViewsScriptFileName(self):
        return self.__configFileObj['output-files']['sql']['create-views']
    
    def alterTableScriptFileName(self):
        return self.__configFileObj['output-files']['sql']['alter-tables']
    
    def deleteAllDataFromTablesAndViewsScriptFileName(self):
        return self.__configFileObj['output-files']['sql']['delete-all-data-from-tables']
    
    def createStoredProcedureScriptFileName(self):
        return self.__configFileObj['output-files']['sql']['create-stored-procedures']
    
    def dropAllTablesAndViewsScriptFileName(self):
        return self.__configFileObj['output-files']['sql']['drop-tables-and-views']
    
    def daoJavaTemplateOutputFileName(self):
        return self.__configFileObj['output-files']['java']['dao']
    
    def daoImplJavaTemplateOutputFileName(self):
        return self.__configFileObj['output-files']['java']['daoImpl']
    
    def valueObjectJavaTemplateOutputFileName(self):
        return self.__configFileObj['output-files']['java']['value-object']
    